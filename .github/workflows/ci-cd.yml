# 🚀 CI/CD Pipeline para Mi App Empresa
# Workflow principal para testing, building y deployment

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  CACHE_VERSION: v1

jobs:
  # 🧪 Job de Testing
  test:
    name: 🧪 Tests y Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📋 Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-
          
    - name: 🔧 Instalar dependencias
      run: npm ci
      
    - name: 🔍 Linting
      run: npm run lint || echo "Lint warnings found"
      
    - name: 🧪 Ejecutar tests unitarios
      run: npm test -- --coverage --watchAll=false --testTimeout=10000
      env:
        CI: true
        
    - name: 📊 Subir cobertura a Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: 🎯 Tests E2E con Cypress
      uses: cypress-io/github-action@v6
      with:
        build: npm run build
        start: npm start
        wait-on: 'http://localhost:3000'
        wait-on-timeout: 120
        browser: chrome
        record: false
        
  # 🏗️ Job de Build
  build:
    name: 🏗️ Build y Optimización
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Instalar dependencias
      run: npm ci
      
    - name: 🏗️ Build para producción
      run: npm run build
      env:
        GENERATE_SOURCEMAP: false
        
    - name: 📦 Comprimir build
      run: tar -czf build.tar.gz build/
      
    - name: 📤 Subir artefactos
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: build.tar.gz
        retention-days: 30
        
    - name: 📊 Analizar bundle size
      run: npx bundlesize
      continue-on-error: true
      
  # 🔒 Job de Seguridad
  security:
    name: 🔒 Análisis de Seguridad
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 🔧 Instalar dependencias
      run: npm ci
      
    - name: 🔍 Audit de dependencias
      run: npm audit --audit-level=high
      continue-on-error: true
      
    - name: 🛡️ Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true
      
  # 🚀 Job de Deploy (solo en main)
  deploy:
    name: 🚀 Deploy a Producción
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 📦 Descargar artefactos
      uses: actions/download-artifact@v3
      with:
        name: build-files
        
    - name: 📤 Extraer build
      run: tar -xzf build.tar.gz
      
    - name: 🚀 Deploy a Firebase Hosting
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
        channelId: live
        projectId: global-flow-db
        
    - name: 📢 Notificar deploy exitoso
      if: success()
      run: |
        echo "✅ Deploy completado exitosamente!"
        echo "🌐 URL: https://global-flow-db.web.app"
        
  # 📊 Job de Performance Monitoring
  performance:
    name: 📊 Performance Testing
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🚀 Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        uploadArtifacts: true
        temporaryPublicStorage: true
        configPath: './lighthouserc.json'
        
    - name: 📊 Performance Budget
      run: |
        echo "📊 Revisando métricas de performance..."
        echo "🎯 Target: Score > 90"
        echo "📱 Mobile-first optimizations"

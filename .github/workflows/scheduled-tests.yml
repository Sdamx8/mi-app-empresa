# üß™ Workflow de Testing Autom√°tico
# Tests programados y validaciones continuas

name: Scheduled Tests

on:
  schedule:
    # Ejecutar tests cada d√≠a a las 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Tipo de test a ejecutar'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - integration
        - e2e
        - performance

env:
  NODE_VERSION: '18.x'

jobs:
  # üß™ Tests unitarios programados
  scheduled-unit-tests:
    name: üß™ Tests Unitarios Programados
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == 'all' || github.event_name == 'schedule'
    
    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üîß Instalar dependencias
      run: npm ci
      
    - name: üß™ Tests unitarios
      run: npm test -- --coverage --watchAll=false --testTimeout=30000
      env:
        CI: true
        
    - name: üìä Generar reporte de cobertura
      run: |
        echo "## üìä Reporte de Cobertura" >> $GITHUB_STEP_SUMMARY
        echo "$(npm test -- --coverage --watchAll=false --silent | tail -10)" >> $GITHUB_STEP_SUMMARY
        
    - name: üì§ Subir artefactos de cobertura
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ github.run_number }}
        path: coverage/
        retention-days: 30

  # üîó Tests de integraci√≥n
  scheduled-integration-tests:
    name: üîó Tests de Integraci√≥n
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == 'all' || github.event_name == 'schedule'
    
    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üîß Instalar dependencias
      run: npm ci
      
    - name: üîó Tests de integraci√≥n
      run: npm test -- --testPathPattern="integration" --watchAll=false
      env:
        CI: true
        
    - name: üìä Reporte de integraci√≥n
      run: |
        echo "## üîó Tests de Integraci√≥n Completados" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ M√≥dulos validados correctamente" >> $GITHUB_STEP_SUMMARY

  # üåê Tests E2E programados
  scheduled-e2e-tests:
    name: üåê Tests E2E Programados
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'e2e' || github.event.inputs.test_type == 'all' || github.event_name == 'schedule'
    
    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üîß Instalar dependencias
      run: npm ci
      
    - name: üèóÔ∏è Build para testing
      run: npm run build
      
    - name: üåê Tests E2E con Cypress
      uses: cypress-io/github-action@v6
      with:
        start: npm start
        wait-on: 'http://localhost:3000'
        wait-on-timeout: 120
        browser: chrome
        record: false
        spec: |
          cypress/e2e/historial-trabajos.cy.js
          cypress/e2e/empleados.cy.js
          cypress/e2e/herramientas.cy.js
          
    - name: üì§ Subir screenshots E2E
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots-${{ github.run_number }}
        path: cypress/screenshots
        retention-days: 30
        
    - name: üìπ Subir videos E2E
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos-${{ github.run_number }}
        path: cypress/videos
        retention-days: 30

  # ‚ö° Tests de performance
  scheduled-performance-tests:
    name: ‚ö° Tests de Performance
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == 'all' || github.event_name == 'schedule'
    
    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üîß Instalar dependencias
      run: npm ci
      
    - name: üèóÔ∏è Build optimizado
      run: npm run build
      env:
        GENERATE_SOURCEMAP: false
        
    - name: ‚ö° Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        uploadArtifacts: true
        temporaryPublicStorage: true
        configPath: './lighthouserc.json'
        
    - name: üìä Bundle Size Check
      run: |
        npm run bundlesize || echo "Bundle size check completed"
        
    - name: üìà Performance Report
      run: |
        echo "## ‚ö° Reporte de Performance" >> $GITHUB_STEP_SUMMARY
        echo "üéØ Lighthouse CI ejecutado" >> $GITHUB_STEP_SUMMARY
        echo "üì¶ Bundle size verificado" >> $GITHUB_STEP_SUMMARY

  # üîí Tests de seguridad
  scheduled-security-tests:
    name: üîí Tests de Seguridad
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.test_type == 'all'
    
    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: üîß Instalar dependencias
      run: npm ci
      
    - name: üîç NPM Audit
      run: |
        npm audit --audit-level=moderate || echo "Vulnerabilidades encontradas"
        
    - name: üõ°Ô∏è Snyk Security Test
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true
      
    - name: üîí Reporte de seguridad
      run: |
        echo "## üîí Reporte de Seguridad" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Audit de dependencias completado" >> $GITHUB_STEP_SUMMARY
        echo "üõ°Ô∏è Snyk scan ejecutado" >> $GITHUB_STEP_SUMMARY

  # üìß Notificaci√≥n de resultados
  notify-results:
    name: üìß Notificar Resultados
    runs-on: ubuntu-latest
    needs: [scheduled-unit-tests, scheduled-integration-tests, scheduled-e2e-tests, scheduled-performance-tests, scheduled-security-tests]
    if: always() && (github.event_name == 'schedule')
    
    steps:
    - name: üìä Resumen de resultados
      run: |
        echo "## üìä Resumen de Testing Programado" >> $GITHUB_STEP_SUMMARY
        echo "**Fecha:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Tests Unitarios:** ${{ needs.scheduled-unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tests Integraci√≥n:** ${{ needs.scheduled-integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tests E2E:** ${{ needs.scheduled-e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tests Performance:** ${{ needs.scheduled-performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tests Seguridad:** ${{ needs.scheduled-security-tests.result }}" >> $GITHUB_STEP_SUMMARY
        
    - name: üìß Notificar por email (en caso de fallos)
      if: contains(needs.*.result, 'failure')
      run: |
        echo "‚ö†Ô∏è ALERTA: Tests programados fallaron"
        echo "Revisar logs en: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
  # üßπ Cleanup de artefactos antiguos
  cleanup-artifacts:
    name: üßπ Limpieza de Artefactos
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: üßπ Eliminar artefactos antiguos
      uses: actions/github-script@v7
      with:
        script: |
          const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const oneWeekAgo = new Date();
          oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
          
          for (const artifact of artifacts.artifacts) {
            if (new Date(artifact.created_at) < oneWeekAgo) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              console.log(`Deleted artifact: ${artifact.name}`);
            }
          }
